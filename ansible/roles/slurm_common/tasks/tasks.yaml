---
# tasks file for roles/slurm_common
- name: Check slurm_config is defined
  run_once: yes
  debug:
    msg: "slurm: {{ slurm }} --- slurm_config: {{ slurm_config }}"

- name: Install Packages
  tags:
    - apt
    - never
    - build
  apt:
    name: 
    - 'build-essential'
    - 'cgroup-lite'
    - 'cgroup-tools'
    - 'cgroupfs-mount'
    - 'debootstrap'
    - 'git'
    - 'hwloc'
    - 'libcgroup1'
    - 'libdbus-1-dev'
    - 'libgpgme11-dev'
    - 'libhwloc-dev'
    - 'libjson-c-dev'
    - 'libmariadb-dev'
    - 'libmunge-dev'
    - 'libnss-ldapd'
    - 'libnuma1'
    - 'libnuma-dev'
    - 'libpam0g-dev'
    - 'libseccomp-dev'
    - 'libssl-dev'
    - 'munge'
    - 'openjdk-11-jre-headless'
    - 'pkg-config'
    - 'python3-dev'
    - 'squashfs-tools'
    - 'unzip'
    - 'uuid-dev'
    - 'virtualenv'
    - 'xauth'
    state: latest
    update_cache: yes
  register: apt_res
  retries: 3
  delay: 15
  until: apt_res is success

#- name: "Ansible | List all known variables and facts"
#  debug:
#    var: hostvars[inventory_hostname]

- name: Ensure ~/src exists
  tags:
    - build
  file:
    path: ~/src
    state: directory
  become: no

- name: Get golang version
  tags:
    - never
    - build
  command: /opt/go/bin/go version
  register: current_golang_version
  ignore_errors: yes

- name: Install golang
  become: yes
  tags:
    - golang
    - never
    - build
  when: 'go.version not in current_golang_version.stdout'
  block:
    - name: Download go {{ go.version }} tarball
      become: no
      get_url:
        url: "{{ go.url }}"
        dest: ~/src/go{{ go.version }}.linux-amd64.tar.gz
        checksum: "{{ go.checksum }}"
    - name: Extract go to /opt
      unarchive:
        src: "~{{ ansible_user }}/src/go{{ go.version }}.linux-amd64.tar.gz"
        dest: /opt/
        creates: /opt/go
        remote_src: yes
    - name: Add GO_PATH etc to environments
      block:
        - name: Add go binaries to PATH
          lineinfile:
            path: "{{ item }}"
            state: present
            create: yes
            line: "export PATH=${PATH}:/opt/go/bin"
            regexp: '^export PATH=${PATH}:/opt/go/bin$'
          loop:
            - /etc/zsh/zshenv
            - /etc/profile.d/golang.sh
        - name: add GOPATH to environment
          lineinfile:
            path: "{{ item }}"
            state: present
            create: yes
            line: "export GOPATH=~/go"
          loop:
            - /etc/zsh/zshenv
            - /etc/profile.d/golang.sh
        - name: add GOPATH/bin to environment
          lineinfile:
            path: "{{ item }}"
            state: present
            create: yes
            line: "export PATH=${PATH}:${GOPATH}/bin"
          loop:
            - /etc/zsh/zshenv
            - /etc/profile.d/golang.sh

- name: Get singularity version
  tags:
    - never
    - build
  command: /usr/local/bin/singularity --version
  register: current_singularity_version
  ignore_errors: yes

- name: Install Singularity
  become: no
  environment:  # necessary because go only added after facts were gathered
    PATH: "{{ ansible_env.PATH }}:/opt/go/bin"
  tags:
    - singularity
    - never
    - build
  when: 'singularity.version not in current_singularity_version.stdout'
  block:
    - name: Download singularity {{ singularity.version }}
      get_url:
        url: "{{ singularity.url }}"
        dest: "~/src/singularity-{{ singularity.version }}.tar.gz"
        checksum: "{{ singularity.checksum }}"
    - name: Ensure singularity exists in GOPATH
      file:
        path: ~/go/src/github.com/sylabs
        state: directory
        mode: u=rwx,g=rx,o=
        recurse: yes
    - name: Extract singularity to GOPATH
      unarchive:
        src: "~/src/singularity-{{ singularity.version }}.tar.gz"
        dest: ~/go/src/github.com/sylabs
        creates: "~/go/src/github.com/sylabs/singularity-ce-{{ singularity.version }}"
        remote_src: yes
    - name: run mconfig
      command:
        argv:
          - ./mconfig
#          - --prefix=/opt/singularity
        creates: "~/go/src/github.com/sylabs/singularity-ce-{{ singularity.version }}/builddir/Makefile"
      args:
        chdir: "~/go/src/github.com/sylabs/singularity-ce-{{ singularity.version }}"
    - name: Make singularity
      make:
        chdir: "~/go/src/github.com/sylabs/singularity-ce-{{ singularity.version }}/builddir"
        params:
          NUM_THREADS: "{{ ansible_processor_vcpus }}"
      environment:
        MAKEFLAGS: "-j{{ ansible_processor_vcpus }}"
    - name: "Install singularity"
      make:
        chdir: "~{{ ansible_user }}/go/src/github.com/sylabs/singularity-ce-{{ singularity.version }}/builddir"
        target: install
      become: yes
      environment:
        MAKEFLAGS: "-j{{ ansible_processor_vcpus }}"
    - name: Add singularity to the PATH
      lineinfile:
        path: "{{ item }}"
        state: present
        create: yes
        line: "export PATH=$PATH:/opt/singularity/bin"
        regexp: '^export PATH=$PATH:/opt/singularity/bin$'
      become: yes
      loop:
        - /etc/zsh/zshenv
        - /etc/profile.d/singularity.sh

- name: Get OpenUCX version
  tags:
    - never
    - build
  command: /opt/ucx/bin/ucx_info  -v
  register: current_ucx_version
  ignore_errors: yes

- name: Install OpenUCX
  become: no
  tags:
    - ucx
    - never
    - build
  when: 'ucx.version not in current_ucx_version.stdout'
  block:
    - name: Download OpenUCX {{ ucx.version }}
      get_url:
        url: "{{ ucx.url }}"
        dest: "~/src/openucx-{{ ucx.version }}.tar.gz"
        checksum: "{{ ucx.checksum }}"
    - name: Uncompress OpenUCX {{ ucx.version }}
      unarchive:
        src: "~/src/openucx-{{ ucx.version }}.tar.gz"
        dest: /dev/shm
        remote_src: yes
#    - name: Create configure script for OpenUCX {{ ucx.version }}
#      command: ./autogen.sh
#      args:
#        chdir: "/dev/shm/ucx-{{ ucx.version }}"
    - name: Run release configure for OpenUCX {{ ucx.version }}
      command: ./contrib/configure-release --prefix={{ ucx.dir }}
      args:
        chdir: "/dev/shm/ucx-{{ ucx.version }}"
    - name: Compile OpenUCX {{ ucx.version }}
      make:
        chdir: "/dev/shm/ucx-{{ ucx.version }}"
        params:
          NUM_THREADS: "{{ ansible_processor_vcpus }}"
      environment:
        MAKEFLAGS: "-j{{ ansible_processor_vcpus }}"
    - name: Install OpenUCX {{ ucx.version }} to {{ ucx.dir }}
      make:
        chdir: "/dev/shm/ucx-{{ ucx.version }}"
        target: install
      environment:
        MAKEFLAGS: "-j{{ ansible_processor_vcpus }}"
      become: yes

- name: Get OpenMPI version
  command: "/opt/openmpi/{{ mpi.version }}/bin/ompi_info --version"
  register: current_mpi_version
  ignore_errors: yes
  tags:
    - OpenMPI
    - never
    - build

- name: Install OpenMPI
  vars:
    mpi_dir: /opt/openmpi
    uncompress_dir: "~{{ ansible_user }}/compile"
    install_dir: "{{ mpi_dir }}/{{ mpi.version }}"
  tags:
    - OpenMPI
    - never
    - build
  become: no
  when: 'mpi.version not in current_mpi_version.stdout'
  block:
    - name: Download OpenMPI {{ mpi.version }}
      get_url:
        url: "{{ mpi.url }}"
        dest: "~/src/openmpi-{{ mpi.version }}.tar.bz2"
        checksum: "{{ mpi.checksum }}"
    - name: Ensure {{ uncompress_dir }} exists
      file:
        path: "{{ uncompress_dir }}"
        state: directory
    - name: Uncompress OpenMPI to {{ uncompress_dir }}
      unarchive:
        src: "~/src/openmpi-{{ mpi.version }}.tar.bz2"
        dest: "{{ uncompress_dir }}"
        creates: "{{ uncompress_dir }}/openmpi-{{ mpi.version }}"
        remote_src: yes
    - name: Check OpenMPI build dir
      file:
        path: "{{ uncompress_dir }}/openmpi-{{ mpi.version }}/build"
        state: directory
    - name: Configure OpenMPI
      command: "../configure --enable-static --with-singularity --with-ucx={{ ucx.dir }} --prefix={{ install_dir }}"
      args:
        chdir: "{{ uncompress_dir }}/openmpi-{{ mpi.version }}/build"
        creates: "{{ uncompress_dir }}/openmpi-{{ mpi.version }}/build/Makefile"
    - name: Compile OpenMPI
      make:
        chdir: "{{ uncompress_dir }}/openmpi-{{ mpi.version }}/build"
        params:
          NUM_THREADS: "{{ ansible_processor_vcpus }}"
      environment:
        MAKEFLAGS: "-j{{ ansible_processor_vcpus }}"
    - name: Install OpenMPI
      make:
        chdir: "{{ uncompress_dir }}/openmpi-{{ mpi.version }}/build"
        target: install
      environment:
        MAKEFLAGS: "-j{{ ansible_processor_vcpus }}"
      become: yes
    - name: Configure paths and directories
      become: yes
      block:
        - name: Ensure OpenMPI profile file exists
          file:
            path: /etc/profile.d/openmpi.sh
            owner: root
            group: root
            mode: "ug=rw,o=r"
            state: touch

        - name: Ensure OpenMPI is available on PATH
          lineinfile:
            path: "{{ item }}"
            create: yes
            regexp: '^.*PATH..opt.openmpi.*[^s]bin...PATH.*'
            line: 'export PATH={{ install_dir }}/bin:${PATH}'
          loop:
            - /etc/zsh/zshenv
            - /etc/profile.d/openmpi.sh

        - name: Ensure OpenMPI MANs are available
          lineinfile:
            path: "{{ item }}"
            regexp: '^.*MANPATH..opt.openmpi.*share.man...MANPATH.*'
            line: 'export MANPATH={{ install_dir }}/share/man:${MANPATH}'
          loop:
            - /etc/zsh/zshenv
            - /etc/profile.d/openmpi.sh

        - name: Ensure OpenMPI headers are in INCLUDE
          lineinfile:
            path: "{{ item }}"
            regexp: '^.*INCLUDE..opt.openmpi.*include...INCLUDE.*'
            line: 'export INCLUDE={{ install_dir }}/include:${INCLUDE}'
          loop:
            - /etc/zsh/zshenv
            - /etc/profile.d/openmpi.sh

        - name: Ensure OpenMPI libs are in LD_LIBRARY_PATH
          lineinfile:
            path: "{{ item }}"
            regexp: '^.*LD_LIBRARY_PATH..opt.openmpi.*lib...LD_LIBRARY_PATH.*'
            line: 'export LD_LIBRARY_PATH={{ install_dir }}/lib:${LD_LIBRARY_PATH}'
          loop:
            - /etc/zsh/zshenv
            - /etc/profile.d/openmpi.sh

        - name: Ensure pkgconfig is in PKG_CONFIG_PATH
          lineinfile:
            path: "{{ item }}"
            regexp: '^.*PKG_CONFIG_PATH..opt.openmpi.*lib.*pkgconfig...PKG_CONFIG_PATH.*'
            line: 'export PKG_CONFIG_PATH={{ install_dir }}/lib/pkgconfig:${PKG_CONFIG_PATH}'
          loop:
            - /etc/zsh/zshenv
            - /etc/profile.d/openmpi.sh

#- name: Set slurm version info
#  when: slurm.version is not defined
#  set_fact:
#    slurm.version: "{{ slurm.version }}"
#    slurm.version_git: "{{ slurm.version_git }}"
#  tags:
#    - slurm
#    - slurmconf
#    - never
#    - build

- name: Check Slurm Version
  become: no
  tags:
    - install
    - slurm
    - build
  block:
    - name: Check slurm directory
      stat:
        path: /opt/slurm/{{ slurm.version }}
      register: current_slurm_version_dir_exists
    - name: Slurm version is incorrect
      command: /bin/false
      when: (not current_slurm_version_dir_exists.stat.exists) or (not current_slurm_version_dir_exists.stat.isdir)
  rescue:
    - name: Fetch slurm repo
      git:
        repo: 'https://github.com/SchedMD/slurm.git'
        dest: ~/src/slurm
        version: "slurm-{{ slurm.version_git }}"

    - name: ./configure slurm build
      command: ./configure --prefix=/opt/slurm/{{ slurm.version }} --enable-pam --with-json
      args:
        chdir: ~/src/slurm

    - name: Make slurm
      make:
        chdir: ~/src/slurm
        params:
          NUM_THREADS: "{{ ansible_processor_vcpus }}"
      environment:
        MAKEFLAGS: "-j{{ ansible_processor_vcpus }}"

    - name: Make slurm contrib
      make:
        chdir: ~/src/slurm
        target: contrib
        params:
          NUM_THREADS: "{{ ansible_processor_vcpus }}"
      environment:
        MAKEFLAGS: "-j{{ ansible_processor_vcpus }}"

    - name: Make sure install destination exists
      become: yes
      file:
        path: /opt/slurm/{{ slurm.version }}/etc
        state: directory
        recurse: yes
        
    - name: make install slurm
      make:
        chdir: "~{{ ansible_user }}/src/slurm"
        target: install
      become: yes
    - name: make install slurm contrib
      make:
        chdir: "~{{ ansible_user }}/src/slurm"
        target: install-contrib
      become: yes

- name: Configure paths and directories
  tags:
    - path
    - install
    - never
    - build
  become: yes
  block:
    - name: Ensure slurm profile file exists
      file:
        path: /etc/profile.d/slurm.sh
        owner: root
        group: root
        mode: "ug=rw,o=r"
        state: touch

    - name: Ensure slurm is available on PATH
      lineinfile:
        path: "{{ item }}"
        create: yes
        regexp: '^.*PATH..opt.slurm.*[^s]bin...PATH.*'
        line: 'export PATH=/opt/slurm/{{ slurm.version }}/bin:${PATH}'
      loop:
        - /etc/zsh/zshenv
        - /etc/profile.d/slurm.sh

    - name: Ensure slurm sbin is available on PATH
      lineinfile:
        path: "{{ item }}"
        regexp: '^.*PATH..opt.slurm.*sbin...PATH.*'
        line: 'export PATH=/opt/slurm/{{ slurm.version }}/sbin:${PATH}'
      loop:
        - /etc/zsh/zshenv
        - /etc/profile.d/slurm.sh

    - name: Ensure slurm MANs are available
      lineinfile:
        path: "{{ item }}"
        regexp: '^.*MANPATH..opt.slurm.*share.man...MANPATH.*'
        line: 'export MANPATH=/opt/slurm/{{ slurm.version }}/share/man:${MANPATH}'
      loop:
        - /etc/zsh/zshenv
        - /etc/profile.d/slurm.sh

    - name: Ensure slurm headers are in INCLUDE
      lineinfile:
        path: "{{ item }}"
        regexp: '^.*INCLUDE..opt.slurm.*include...INCLUDE.*'
        line: 'export INCLUDE=/opt/slurm/{{ slurm.version }}/include:${INCLUDE}'
      loop:
        - /etc/zsh/zshenv
        - /etc/profile.d/slurm.sh

    - name: Ensure slurm libs are in LD_LIBRARY_PATH
      lineinfile:
        path: "{{ item }}"
        regexp: '^.*LD_LIBRARY_PATH..opt.slurm.*lib...LD_LIBRARY_PATH.*'
        line: 'export LD_LIBRARY_PATH=/opt/slurm/{{ slurm.version }}/lib:${LD_LIBRARY_PATH}'
      loop:
        - /etc/zsh/zshenv
        - /etc/profile.d/slurm.sh


# - name: Copy Slurm Config
#   copy:
#     src: /home/slurm/src/slurm/etc/slurm.conf.example
#     dest: /opt/slurm/{{ slurm.version }}/etc/slurm.conf
#     remote_src: yes
#     owner: slurm

- name: Configure slurm
  tags:
    - slurmconf
    - build
  when: slurm_config is defined and slurm is defined
  become: yes
  block:
    - name: Ensure slurm group "{{ slurm_config.group_name }}" exists
      group:
        name: "{{ slurm_config.group_name }}"
        state: present
        system: yes
    - name: Ensure slurm user "{{ slurm_config.username }}" exists
      user:
        name: "{{ slurm_config.username }}"
        comment: "System user for slurm"
        state: present
        system: yes
        group: "{{ slurm_config.group_name }}"
#        home: "/home/slurm"
        skeleton: /etc/skel
        shell: /bin/bash
    - name: Ensure SlurmSpoolDir /var/spool/slurmd exists
      file:
        path: /var/spool/slurmd
        state: directory
        owner: "{{ slurm_config.username }}"
        group: "{{ slurm_config.group_name }}"
        mode: "ug=rwx,o=rx"
      tags: "slurmd"

    - name: Ensure log dir /var/log/slurm exists
      file:
        path: /var/log/slurm
        state: directory
        owner: "{{ slurm_config.username }}"
        group: "{{ slurm_config.group_name }}"
        mode: "ug=rwx,o=rx"

    - name: Ensure slurm etc dir /opt/slurm/{{ slurm.version }}/etc exists
      file:
        path: /opt/slurm/{{ slurm.version }}/etc
        state: directory
        owner: "{{ slurm_config.username }}"
        group: "{{ slurm_config.group_name }}"
        recurse: yes

    - name: Create slurm.conf
      tags: slurm.conf
      template:
        src: slurm.conf.j2
        dest: /opt/slurm/{{ slurm.version }}/etc/slurm.conf
        owner: "{{ slurm_config.username }}"
        group: "{{ slurm_config.group_name }}"
        mode: "ug=rw,o=r"
    - name: Create cgroup.conf
      tags: cgroup.conf
      template:
        src: cgroup.conf
        dest: /opt/slurm/{{ slurm.version }}/etc/cgroup.conf
        owner: "{{ slurm_config.username }}"
        group: "{{ slurm_config.group_name }}"
        mode: "u=rw,g=r,o=r"

- name: Ensure host has correct munge key
  vars:
    pwd_alias: "{{ lookup('password', '/dev/null length=1024 chars=ascii_letters') }}"
  become: yes
  tags:
    - munge
    - never
    - build
  block:
    - name: Set munge password
      set_fact:
        munge_key: "{{ pwd_alias }}"
      run_once: true
    - name: Nuke key
      file:
        path: /etc/munge/munge.key
        state: absent
    - name: Create empty file
      file:
        path: /etc/munge/munge.key
        state: touch
        mode: "u=rw,go="
        owner: munge
        group: munge
    - name: Write password to key
      lineinfile:
        path: /etc/munge/munge.key
        line: "{{ munge_key }}"

    - name: Restart munge service
      service:
        name: munge
        enabled: yes
        state: restarted

- name: Remove system lmod
  apt:
    name: lmod
    state: absent
    purge: yes
  tags:
    - lmod
    - never
    - build

- name: Install lmod and dependencies
  tags:
    - lmod
    - never
    - build
  block:
    - name: Install lmod dependencies
      apt:
        name:
          - lua5.3
          - lua-bit32:amd64
          - lua-posix:amd64
          - lua-posix-dev
          - liblua5.3-0:amd64
          - liblua5.3-dev:amd64
          - tcl
          - tcl-dev
          - tcl8.6
          - tcl8.6-dev:amd64
          - libtcl8.6:amd64
    - name: Fetch lmod source
      become: no
      get_url:
        url: "https://downloads.sourceforge.net/project/lmod/Lmod-8.7.tar.bz2?ts=gAAAAABj9xbQcJjG_h7LaoBQtw0ElAzw2xMDX97zjmzwg4H6OnPAd-z6U3HriF4oTc3N_02tWECktM3ssUgk6vvXagl28v9zEg%3D%3D&r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Flmod%2Ffiles%2FLmod-8.7.tar.bz2%2Fdownload"
        dest: ~/src/lmod.tar.bz2
        checksum: "sha256:9eac5fa3345fe68eb5fa518517fffff3731a8816183b4f3cc4882786b484bf46"
    - name: Extract lmod source
      become: no
      unarchive:
        src: ~/src/lmod.tar.bz2
        dest: ~/src
        creates: ~/src/Lmod-8.7
        remote_src: yes
    - name: Configure lmod
      become: no
      command: ./configure --prefix=/opt/lmod/8.7
      args:
        chdir: ~/src/Lmod-8.7
#        creates: ~/src/Lmod-8.7/makefile
    - name: Build lmod
      become: no
      command: make
      args:
        chdir: ~/src/Lmod-8.7
    - name: Install lmod
      become: yes
      command: make install
      args:
        chdir: "~{{ ansible_user }}/src/Lmod-8.7"
    - name: Link profile.d lmod.sh
      become: yes
      file:
        src: /opt/lmod/8.7/lmod/lmod/init/profile
        dest: /etc/profile.d/lmod.sh
        state: link
    - name: Add software/modules to MODULEPATH
      become: yes
      lineinfile:
          path: /etc/profile.d/lmod.sh
          line: "export MODULEPATH=/software/modules:$MODULEPATH"
          insertafter: EOF
